<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.avg.lawsuitmanagement.advice.repository.AdviceMapperRepository" >
 <!--   <resultMap id="AdviceResultMap" type="AdviceDto">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="contents" column="contents"/>
        <result property="advicedAt" column="adviced_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="lawsuitId" column="lawsuit_id"/>

        <collection property="memberId" ofType="java.lang.String" javaType="java.util.ArrayList" column="{adviceId = id}" select="selectAdviceMemberList"/>
        <collection property="clientId" ofType="java.lang.String" javaType="java.util.ArrayList" column="{adviceId=id}" select="selectAdviceClientList"/>
    </resultMap>

    <select id="selectAdviceById" resultMap="AdviceResultMap" parameterType="java.lang.Long">
        select
            a.id,
            a.lawsuit_id,
            a.title,
            a.contents,
            a.adviced_at
        from advice as a
        WHERE a.id = #{adviceId} AND a.is_deleted=false;
    </select>

    <select id ="selectAdviceClientList" resultType = "java.lang.String">
        select c.name, c.id
            from advice_client_map as m
            join client c on m.client_id = c.id AND m.is_deleted=false
        where m.advice_id = #{adviceId}
    </select>

    <select id ="selectAdviceMemberList" resultType = "java.lang.String">
        select e.name, e.id
        from advice_member_map as m
                 join member e on m.member_id = e.id AND m.is_deleted=false
        where m.advice_id = #{adviceId}
    </select>-->
    
    <select id="selectAdviceByLawsuitId" parameterType="java.lang.Long"
    resultType="com.avg.lawsuitmanagement.advice.dto.AdviceDto">
        select id, lawsuit_id, title, contents, adviced_at
        from advice
        where lawsuit_id = #{lawsuitId} and is_deleted=false;
    </select>

    <select id="detailAdviceById" parameterType="java.lang.Long"
    resultType="com.avg.lawsuitmanagement.advice.dto.AdviceRawDto">
        select a.id `advice_id`,
               a.lawsuit_id  `lawsuit_id` ,
               a.title `title` ,
               a.contents `contents` ,
               a.adviced_at `adviced_at` ,
               c.client_id `client_id` ,
               c2.name `client_name` ,
               m.member_id `member_id` ,
               m2.name `member_name`
        from advice a
            left join advice_client_map c on a.id = c.advice_id and a.is_deleted=false
            left join client c2 on c2.id = c.client_id and a.is_deleted=false
            left join advice_member_map m on a.id = m.advice_id and a.is_deleted=false
            left join member m2 on m2.id = m.member_id and a.is_deleted=false
        where a.id = #{adviceId} and a.is_deleted=false


    </select>

    <select id="selectMemberByAdviceId" parameterType="java.lang.Long">
        select member_id
        from advice_member_map
        where advice_id = #{adviceId}
        and is_deleted = false;

    </select>

    <select id="selectClientByAdviceId" parameterType="java.lang.Long">
        select client_id
        from advice_client_map
        where advice_id = #{adviceId}
        and is_deleted = false;
    </select>
    
    <insert id="insertAdvice" parameterType="InsertAdviceParam">
        insert into advice (title, contents, adviced_at, lawsuit_id)
        values
            (#{title}, #{contents}, #{advicedAt}, #{lawsuitId});
    </insert>

    <select id="getLastInsertedAdviceId" resultType="java.lang.Long">
        SELECT LAST_INSERT_ID();
    </select>

    <!--<insert id="insertAdviceClientMap" parameterType="AdviceClientIdParam">
    INSERT INTO advice_client_map (advice_id, client_id)
    VALUES
        <foreach item="clientId" collection="clientId" separator=",">
            (#{adviceId}, #{clientId})
        </foreach>
    </insert>-->

   <!-- <insert id="insertAdviceMemberMap" parameterType="AdviceMemberIdParam">
    INSERT INTO advice_member_map (advice_id, member_id)
    VALUES
        <foreach item="memberId" collection="memberId"  separator=",">
            (#{adviceId}, #{memberId})
        </foreach>
    </insert>-->
    
    <update id="updateAdviceMemberMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.AdviceMemberIdParam">
        update advice_member_map
        set is_deleted = 0
        where advice_id = #{adviceId} and
              <foreach item="memberId" collection="memberId" separator="or">
                member_id = #{memberId}
              </foreach>
    </update>
    
    <insert id="insertAdviceMemberMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.AdviceMemberIdParam">
        insert ignore into advice_member_map (advice_id, member_id, is_deleted)
        values
            <foreach item="memberId" collection="memberId" separator=",">
                (#{adviceId}, #{memberId}, 0)
            </foreach>
    </insert>

    <update id="updateAdviceClientMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.AdviceMemberIdParam">
        update advice_client_map
        set is_deleted = 0
        where advice_id = #{adviceId} and
              <foreach item="clientId" collection="clientId" separator="or">
                  client_id = #{clientId}
              </foreach>
    </update>

    <insert id="insertAdviceClientMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.AdviceMemberIdParam">
        insert ignore into advice_client_map (advice_id, client_id, is_deleted)
        values
            <foreach item="clientId" collection="clientId"  separator=",">
                (#{adviceId}, #{clientId}, 0)
            </foreach>
    </insert>

    <update id="deleteAdviceClientMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.DeleteAdviceClientMemberIdParam">
        update advice_client_map
        set is_deleted = 1
        where advice_id = #{adviceId}
        <if test="clientId != null and clientId.size() > 0">
            and
            <foreach item="clientId" collection="clientId" separator="OR">
                client_id = #{clientId}
            </foreach>
        </if>
    </update>

    <update id="deleteAdviceMemberMap" parameterType="com.avg.lawsuitmanagement.advice.repository.param.DeleteAdviceClientMemberIdParam">
        update advice_member_map
        set is_deleted = 1
        where advice_id = #{adviceId}
        <if test="memberId != null and memberId.size() > 0">
            and
            <foreach item="memberId" collection="memberId" separator="OR">
                member_id = #{memberId}
            </foreach>
        </if>
    </update>

    <update id="updateAdviceInfo" parameterType="UpdateAdviceInfoParam">
        update advice
        set title = #{title},
        contents = #{contents},
        adviced_at = #{advicedAt}
        where id = #{adviceId}
    </update>
    


    <update id="deleteAdviceInfo" parameterType="java.lang.Long">
        update advice
        set is_deleted = true
        where id = #{adviceId};
    </update>
    <!--<update id="deleteAdviceClientMap" parameterType="java.lang.Long">
        update advice_client_map
        set is_deleted = true
        where advice_id = #{adviceId};
    </update>
    
    <update id="deleteAdviceMemberMap" parameterType="java.lang.Long">
        update  advice_member_map
        set is_deleted = true
        where  advice_id = #{adviceId};
    </update>-->
</mapper>